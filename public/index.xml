<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Containers :: Learn containers</title>
    <link>https://khushiramsingh680.github.io/containers/index.html</link>
    <description>ðŸš€ Containers Welcome to the Containers Knowledge Hub.&#xA;This section will guide you through the core concepts and practical usage of modern container technologies.&#xA;ðŸ“¦ What Youâ€™ll Learn Docker â†’ Building and running containerized applications Podman â†’ Daemonless container management CRI-O &amp; Low-Level Runtimes â†’ Lightweight Kubernetes container runtime using OCI standards Kubernetes â†’ Orchestrating containers at scale ðŸ“˜ Why Containers? Containers provide:&#xA;Portability across environments Lightweight and efficient deployments Faster development and scaling Integration with Kubernetes using runtimes like CRI-O and containerd</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://khushiramsingh680.github.io/containers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker</title>
      <link>https://khushiramsingh680.github.io/containers/containers/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://khushiramsingh680.github.io/containers/containers/index.html</guid>
      <description>Please click Here to connect Docker â€“ Table of Contents 1. Linux Kernel &amp; Container Fundamentals Namespaces â†’ PID, Mount, Network, IPC, UTS, User cgroups â†’ CPU, Memory, I/O, PIDs limits Filesystem isolation with chroot Experimenting with unshare to create isolated environments How Docker and Podman use namespaces and cgroups internally 2. Introduction What is Docker? Benefits of containerization Docker vs Virtual Machines Containers vs Low-Level Runtimes (CRI-O, containerd) 3. Installation &amp; Setup Install Docker on Linux, Windows, macOS Docker Desktop Docker Engine vs Docker Desktop Verify installation 4. Docker Architecture Docker Daemon Docker Client Docker Images Docker Containers Docker Registries (Docker Hub, private registries) Low-level container runtimes: CRI-O &amp; containerd 5. Working with Docker Images Building images with Dockerfile Using prebuilt images Managing images (docker pull, docker images, docker rmi) Image layers &amp; storage drivers 6. Working with Containers Running containers (docker run) Listing, starting, stopping, removing containers Detached mode &amp; interactive mode Executing commands inside containers Understanding isolation using namespaces Resource control using cgroups Low-level experiments with unshare and chroot 7. Docker Networking Bridge network Host network Overlay network Custom networks Port mapping &amp; exposing services Network namespaces overview 8. Docker Volumes &amp; Storage Bind mounts vs volumes Creating and using volumes Sharing data between containers Backup &amp; restore volumes Storage namespaces &amp; container filesystem isolation 9. Docker Compose Introduction to Compose docker-compose.yml structure Multi-container applications Environment variables &amp; scaling 10. Docker Security Best practices User namespaces Scanning images Secrets management Seccomp &amp; AppArmor profiles 11. Docker in CI/CD Using Docker in pipelines Building and pushing images Deploying with Docker Integration with Kubernetes using CRI-O/containerd 12. Advanced Docker Multi-stage builds Health checks Resource limits (CPU &amp; memory) Logging &amp; monitoring Low-level runtime configuration 13. Troubleshooting Common errors Debugging containers Checking logs &amp; events Using docker inspect and runtime debug tools 14. Docker vs Alternatives Podman LXC/LXD CRI-O &amp; containerd</description>
    </item>
  </channel>
</rss>